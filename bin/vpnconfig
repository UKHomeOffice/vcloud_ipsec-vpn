#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'generator.rb'
require 'yaml'
require 'nokogiri'
require 'generator'
require 'validator'
require 'api'
require 'login'
require 'diffy'
require 'pp'

class App
  include Methadone::Main
  include Methadone::CLILogging

# the main block
  main do
    api = Vpnconfig::API.new
    self.check_mandatory_inputs
    unless options['w'].nil?
      input_config = YAML.load_file(options['w'])
      errors = Vpnconfig::Validator.new.validate_yaml(input_config)

      if !errors.empty?
        errors.each{|e| puts "#{e.message}"}
        puts 'The schema to match against is:'
        pp YAML.load_file('./lib/vpn-configuration-schema.yaml')
        Kernel.abort('ERROR: Invalid yaml input does not match the schema, see errors above.')
      end
    end

    puts 'Logging in'
    conn = Vpnconfig::Login.new.login(options['u'])
    dc_details = api.get_dc_details(conn, options['d'])
    puts 'Found data centre: '+dc_details['name']
    puts 'Reading configuration....'
    current_config, edgegw_href = api.read_edgegw_config(dc_details, conn)
    puts 'Current configuration is:'
    puts current_config
    puts

    unless options['w'].nil?
      puts 'Reading in your yaml file...'
      vpn_conf = options['write']

      puts 'Generating XML...'
      new_config = Vpnconfig::Generator.new.generate_xml(input_config)

      if new_config.delete(' ').lines.drop(1).join() == current_config.delete(' ') #Comparison removes xml standard line and whitespaces to ensure accurate comparison
        puts 'Old and new configuration are identical, no changes to make'
      else
        puts 'Please confirm you would like to write the new configuration (y/n)'
        confirmation = STDIN.gets
        if confirmation.downcase =~ /^y/
          bkp_config_file = "backup/#{options['d']}_GatewayIpsecVpnService.xml"
          puts 'Backing up existing config to: '+bkp_config_file
          self.save_config(current_config, bkp_config_file)
          puts 'Posting new configuration to skyscape...'
          Vpnconfig::API.new.post_to_api(edgegw_href, conn, new_config)
          'New config has been written to Skyscape'
        end
      end
    end

  end

# supplemental methods here
  def self.check_mandatory_inputs
    if options['d'].nil?
      Kernel.abort('You must define a datacentre')
    end
    if options['u'].nil?
      Kernel.abort('You must provide a username')
    end
    unless options['w'].nil?
      # TODO: Validate yaml meets expectation here
    end
  end

  def self.save_config(xml_obj, filename)
    file = File.open(filename, "w")
    xml_obj.write_xml_to(file, options={})
    file.close
  end

# Declare command-line interface here

  description "Generates XML to configure a VPN, based on a yaml file"
#
# Accept flags via:
# on("--flag VAL","Some flag")
# options[flag] will contain VAL
  on("-w VAL", "--write", "Writes configuration to the VDC as per specified XML file")
  on("-d VAL", "--datacentre", "Name of the skyscape datacentre")
  on("-u VAL", "--user", "Username to connect to the Skyscape Datacenter(check API tab)")
#
# Specify switches via:
# on("--[no-]switch","Some switch")
#
# Or, just call OptionParser methods on opts
#
# Require an argument
#
# # Make an argument optional
# arg :optional_arg, :optional

  version Vpnconfig::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
